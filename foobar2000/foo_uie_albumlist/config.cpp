#include "stdafx.h"

struct
{
	const char * name, *value;
} cfg_view_list_defaults[] =
{
	{ "by album","%album%[ '['%album artist%']']|[[%discnumber%.]%tracknumber%. ][%track artist% - ]%title%" },
	{ "by artist","%<artist>%|%album%|[[%discnumber%.]%tracknumber%. ][%track artist% - ]%title%" },
	{ "by genre","%<genre>%|[%album artist% - ]%album%|[[%discnumber%.]%tracknumber%. ][%track artist% - ]%title%" },
	{ "by year","%<date>%|[%album artist% - ]%album%|[[%discnumber%.]%tracknumber%. ][%track artist% - ]%title%" },
	{ "by artist/album","[%album artist% - ]['['%date%']' ]%album%|[[%discnumber%.]%tracknumber%. ][%track artist% - ]%title%" },
};


// {C584D488-53DD-4d21-A85B-8EC7CCB38216}
static const GUID g_guid_view_list =
{ 0xc584d488, 0x53dd, 0x4d21,{ 0xa8, 0x5b, 0x8e, 0xc7, 0xcc, 0xb3, 0x82, 0x16 } };

// {D3593B47-9924-45cb-97DF-D96E2BF19FAF}
static const GUID g_guid_themed =
{ 0xd3593b47, 0x9924, 0x45cb,{ 0x97, 0xdf, 0xd9, 0x6e, 0x2b, 0xf1, 0x9f, 0xaf } };

cfg_view_list_t cfg_view_list(g_guid_view_list);

cfg_string cfg_playlist_name(create_guid(0x4beb593f, 0xa010, 0x8b3a, 0x7b, 0x2a, 0x63, 0xad, 0xf3, 0x9f, 0xc6, 0xb4), "Library view");

cfg_bool cfg_themed(g_guid_themed, true);
cfg_int cfg_show_numbers(create_guid(0xdd6f150e, 0xc995, 0xf018, 0x28, 0x58, 0x24, 0x85, 0x3d, 0xed, 0xf3, 0x52), 0), cfg_show_numbers2(create_guid(0x6a35739b, 0xbf63, 0x541a, 0x10, 0x5f, 0xdd, 0x41, 0x56, 0x67, 0xcd, 0xa0), 0);
cfg_int cfg_warning_displayed(create_guid(0x3a778473, 0x135b, 0x8608, 0x38, 0x25, 0x81, 0xc7, 0xef, 0x1f, 0xf7, 0x5d), 1);
cfg_int cfg_dblclk(create_guid(0x3c8a9131, 0x8326, 0xc47a, 0x55, 0x07, 0x63, 0xef, 0xe5, 0x89, 0xfb, 0xb2), 0);
cfg_int cfg_middle(create_guid(0xb35b99b8, 0xdb22, 0xc748, 0x98, 0xaa, 0x84, 0xa2, 0x08, 0x36, 0x3d, 0x99), 3);

cfg_int cfg_autosend(create_guid(0x0ab307e0, 0xc615, 0x8446, 0x09, 0x40, 0x37, 0x2b, 0xf9, 0x41, 0xd2, 0x87), 1);
cfg_int cfg_keyb(create_guid(0xcb1163d6, 0x42b9, 0xcb55, 0x35, 0x5c, 0xef, 0x80, 0xbd, 0x26, 0x9d, 0xe4), 1);

cfg_int cfg_autoplay(create_guid(0xe03def63, 0x2645, 0x6103, 0xb3, 0xb9, 0xe7, 0x97, 0xe4, 0x6c, 0xf8, 0x56), 1);

cfg_int cfg_populate(create_guid(0x57cbf474, 0xff1a, 0xb8a1, 0x2d, 0x1a, 0xad, 0x8b, 0x49, 0x62, 0xa2, 0x02), 1);

cfg_int cfg_hscroll(create_guid(0x0d9662bf, 0x3b8f, 0x410b, 0xb6, 0x7d, 0x94, 0xd4, 0x35, 0x50, 0x6d, 0x73), 1);
cfg_int cfg_frame(create_guid(0xa7bfe9a9, 0xbb1e, 0x0e80, 0xc9, 0x52, 0xbb, 0x23, 0x90, 0xa7, 0xe6, 0x03), 1);
cfg_int cfg_postprocess(create_guid(0x9d27951d, 0xb03d, 0x3585, 0x97, 0x9e, 0x6a, 0x2a, 0x29, 0x96, 0x3f, 0x3b), 0);

cfg_int cfg_show_root(create_guid(0x2be2f1ea, 0x0bc5, 0x7a67, 0xdc, 0x22, 0xed, 0xf5, 0x6f, 0x51, 0x13, 0x35), 1);

cfg_int cfg_use_custom_indent(create_guid(0x8cd7d26a, 0x524a, 0xf53f, 0xb3, 0x07, 0x73, 0x4e, 0x96, 0x0d, 0xe0, 0xa1), 0);
cfg_int cfg_indent(create_guid(0xa45b79c4, 0x14ff, 0x6118, 0x08, 0xd4, 0x7b, 0xa9, 0xfd, 0x97, 0xdc, 0x36), 19);

cfg_int cfg_custom_item_height(create_guid(0x8e06049e, 0xfcdc, 0xb446, 0xf8, 0xcb, 0xbf, 0x11, 0xc2, 0xf0, 0x34, 0x1b), 0);
cfg_int cfg_item_height(create_guid(0xc3e0c661, 0xcb3f, 0x80cf, 0x91, 0x05, 0xb4, 0x44, 0x5a, 0xf4, 0x9f, 0xb2), 4);

cfg_int cfg_add_items_use_core_sort(create_guid(0x62bdcc52, 0xd067, 0xb238, 0xbe, 0x2a, 0xc9, 0xbd, 0x26, 0x13, 0xd6, 0xc8), 0),
cfg_add_items_select(create_guid(0x3918ae65, 0xfdfb, 0xe23e, 0xfc, 0x3b, 0xee, 0xce, 0xca, 0xc1, 0xe9, 0x83), 1);

cfg_int cfg_picmixer(create_guid(0x2a9d24a2, 0x2705, 0xb35e, 0xdb, 0x20, 0x86, 0xc6, 0x90, 0xc6, 0xe9, 0x4c), 0);

inline void cfg_view_list_t::get_data_raw(stream_writer * out, abort_callback & p_abort)
{
	t_size n, m = data.get_count();
	out->write_lendian_t(m, p_abort);
	for (n = 0; n<m; n++)
	{
		out->write_string(data[n].name, p_abort);
		out->write_string(data[n].value, p_abort);
	}
}

inline void cfg_view_list_t::set_data_raw(stream_reader * r, unsigned psize, abort_callback & p_abort)
{
	data.remove_all();
	t_size n, m = 0;
	r->read_lendian_t(m, p_abort);
	for (n = 0; n<m; n++)
	{
		entry item;
		r->read_string(item.name, p_abort);
		r->read_string(item.value, p_abort);
		data.add_item(item);
	}
}

void cfg_view_list_t::reset()
{
	data.remove_all();
	unsigned n;
	for (n = 0; n<tabsize(cfg_view_list_defaults); n++)
	{
		data.add_item(entry(cfg_view_list_defaults[n].name, cfg_view_list_defaults[n].value));
	}
}

// {06B856CC-86E7-4459-A75C-2DAB5B33B8BB}
const GUID g_guid_album_list_font =
{ 0x6b856cc, 0x86e7, 0x4459,{ 0xa7, 0x5c, 0x2d, 0xab, 0x5b, 0x33, 0xb8, 0xbb } };

// {DA66E8F3-D210-4ad2-89D4-9B2CC58D0235}
const GUID g_guid_album_list_colours =
{ 0xda66e8f3, 0xd210, 0x4ad2,{ 0x89, 0xd4, 0x9b, 0x2c, 0xc5, 0x8d, 0x2, 0x35 } };
